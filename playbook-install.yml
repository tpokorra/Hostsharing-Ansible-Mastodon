---
- hosts: mastodon
  vars:
    ansible_python_interpreter: /usr/bin/python3
    # see https://docs.ansible.com/ansible/latest/user_guide/become.html#risks-of-becoming-an-unprivileged-user
    ansible_common_remote_group: "{{pac}}"

  tasks:
  - name: Create user, domain and database
    import_tasks: tasks/hs_basis.yml

  - name: Sleep to avoid issue invalid user for temporary files
    pause:
      seconds: 10

  #################################
  ## create directories
  #################################
  - name: create directory bin
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/bin"
      state: directory
  - name: create directory etc
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/etc"
      state: directory
  - name: create directory var/tmp
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/var/tmp"
      state: directory
  - name: create directory var/log
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/var/log"
      state: directory
  - name: create directory var/run
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      path: "/home/pacs/{{pac}}/users/{{user}}/var/run"
      state: directory

  #################################
  ## install requirements
  #################################
  - name: Install node.js
    import_tasks: tasks/hs_nodejs.yml

  - name: Install ruby
    import_tasks: tasks/hs_ruby.yml

  ##################################
  ## install mastodon
  ##################################
  - name: get mastodon repo
    become: yes
    become_user: "{{pac}}-{{user}}"
    git:
      repo: https://github.com/mastodon/mastodon.git
      dest: /home/pacs/{{pac}}/users/{{user}}/live
  - name: checkout specific mastodon release
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
       # checkout latest mastodon release
       # git checkout $(git tag -l | grep -v 'rc[0-9]*$' | sort -V | tail -n 1)
       # checkout specific release
       git checkout "{{mastodon_release}}"
    args:
        executable: /bin/bash
        chdir: "/home/pacs/{{pac}}/users/{{user}}/live"
  - name: install ruby packages
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      . ~/.profile
      gem install bundler
      bundle install -j$(getconf _NPROCESSORS_ONLN) --deployment --without development test  || exit -1
    args:
        executable: /bin/bash
        chdir: "/home/pacs/{{pac}}/users/{{user}}/live"
  - name: install node.js packages
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      . ~/.profile
      yarn install --pure-lockfile || exit -1
    args:
        executable: /bin/bash
        chdir: "/home/pacs/{{pac}}/users/{{user}}/live"

  ##################################
  ## configuration
  ##################################
  - name: upload mastodon configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/live/.env.production" src="templates/env.production" mode=0600

  - name: insert secrets and keys
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      . ~/.profile
      export SECRET_KEY_BASE=`RAILS_ENV=production bundle exec rake secret`
      sed -i "s/SECRET_KEY_BASE=.*/SECRET_KEY_BASE=$SECRET_KEY_BASE/g" .env.production
      export OTP_SECRET=`RAILS_ENV=production bundle exec rake secret`
      sed -i "s/OTP_SECRET=.*/OTP_SECRET=$OTP_SECRET/g" .env.production
      eval `RAILS_ENV=production bundle exec rake mastodon:webpush:generate_vapid_key`
      sed -i "s/VAPID_PRIVATE_KEY=.*/VAPID_PRIVATE_KEY=$VAPID_PRIVATE_KEY/g" .env.production
      sed -i "s/VAPID_PUBLIC_KEY=.*/VAPID_PUBLIC_KEY=$VAPID_PUBLIC_KEY/g" .env.production
    args:
        executable: /bin/bash
        chdir: "/home/pacs/{{pac}}/users/{{user}}/live"

  - name: upload redis configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/etc/redis.conf" src="templates/redis.conf" mode=0600

  - name: upload monit configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/.monitrc" src="templates/monitrc" mode=0600

  - name: upload logrotate configuration
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/.logrotate" src="templates/logrotate" mode=0600

  - name: upload restart script
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/bin/restart.sh" src="templates/restart.sh" mode=0700

  ######################
  ## initialise instance
  ######################
  - name: initialise database
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
       . ~/.profile
       export SAFETY_ASSURED=1
       RAILS_ENV=production bundle exec rails db:schema:load || exit -1
       RAILS_ENV=production bundle exec rails db:seed || exit -1
       touch ~/.ansible.dbinitialised
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}/live"    
      creates: /home/pacs/{{pac}}/users/{{user}}/.ansible.dbinitialised

  - name: initialise assets
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
       . ~/.profile
       RAILS_ENV=production bundle exec rails assets:precompile
       touch ~/.ansible.assetsinitialised
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}/live"    
      creates: /home/pacs/{{pac}}/users/{{user}}/.ansible.assetsinitialised

  ########################
  ## setup the apache site
  ########################
  - name: drop htdocs-ssl
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
       path: "/home/pacs/{{pac}}/users/{{user}}/doms/{{domain}}/htdocs-ssl"
       state: absent

  - name: create symbolic link for htdocs-ssl
    become: yes
    become_user: "{{pac}}-{{user}}"
    file:
      src: "/home/pacs/{{pac}}/users/{{user}}/live/public"
      dest: "/home/pacs/{{pac}}/users/{{user}}/doms/{{domain}}/htdocs-ssl"
      state: link

  - name: upload htaccess
    become: yes
    become_user: "{{pac}}-{{user}}"
    template: dest="/home/pacs/{{pac}}/users/{{user}}/doms/{{domain}}/htdocs-ssl/.htaccess" src="templates/htaccess"

  ####################################
  ## install cron jobs
  ####################################
  - name: start monit as cronjob
    become: yes
    become_user: "{{pac}}-{{user}}"
    cron:
      name: "start monit at reboot"
      special_time: reboot
      job: rm -f $HOME/var/run/* && /usr/bin/monit -c "$HOME/.monitrc"
  - name: run logrotate once a day
    become: yes
    become_user: "{{pac}}-{{user}}"
    cron:
      name: "logrotate"
      minute: "27"
      hour: "1"
      job: "/usr/sbin/logrotate -s $HOME/.logrotate.state $HOME/.logrotate"
  - name: clean up old ressources each night
    become: yes
    become_user: "{{pac}}-{{user}}"
    cron:
      name: "mastodon clean old ressources"
      minute: "18"
      hour: "4"
      job: "(export RAILS_ENV=production && cd $HOME/live && $HOME/live/bin/tootctl media remove) >/dev/null 2>&1"

  ##############################################
  ## start the ruby and redis services via monit
  ##############################################
  - name: start monit
    become: yes
    become_user: "{{pac}}-{{user}}"
    shell: |
      /usr/bin/monit -c ".monitrc"
    args:
      executable: /bin/bash
      chdir: "/home/pacs/{{pac}}/users/{{user}}/"
      creates: "/home/pacs/{{pac}}/users/{{user}}/var/run/monit.id"


# TODO elasticsearch?
